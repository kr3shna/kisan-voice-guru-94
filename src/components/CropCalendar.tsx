
import React, { useState } from 'react';
import { Calendar, Clock, Droplets, Scissors, Leaf, Plus } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';

const CropCalendar = () => {
  const [selectedCrop, setSelectedCrop] = useState('рдЧреЗрд╣реВрдВ');
  const [currentWeek, setCurrentWeek] = useState(0);
  const { toast } = useToast();

  const crops = ['рдЧреЗрд╣реВрдВ', 'рдзрд╛рди', 'рдордХреНрдХрд╛', 'рд╕рд░рд╕реЛрдВ', 'рдЪрдирд╛', 'рдкреНрдпрд╛рдЬ'];

  const calendarData = {
    'рдЧреЗрд╣реВрдВ': [
      {
        week: 'рд╕рдкреНрддрд╛рд╣ 1-2',
        stage: 'рдмреБрдЖрдИ',
        tasks: [
          { task: 'рдЦреЗрдд рдХреА рддреИрдпрд╛рд░реА', icon: 'ЁЯЪЬ', status: 'completed', date: '15 рдирд╡рдВрдмрд░' },
          { task: 'рдмреАрдЬ рдмреБрдЖрдИ', icon: 'ЁЯМ▒', status: 'completed', date: '20 рдирд╡рдВрдмрд░' },
          { task: 'рдкрд╣рд▓реА рд╕рд┐рдВрдЪрд╛рдИ', icon: 'ЁЯТз', status: 'pending', date: '25 рдирд╡рдВрдмрд░' }
        ]
      },
      {
        week: 'рд╕рдкреНрддрд╛рд╣ 3-4',
        stage: 'рдЕрдВрдХреБрд░рдг',
        tasks: [
          { task: 'рдЦрд░рдкрддрд╡рд╛рд░ рдирд┐рдпрдВрддреНрд░рдг', icon: 'ЁЯМ┐', status: 'upcoming', date: '5 рджрд┐рд╕рдВрдмрд░' },
          { task: 'рдпреВрд░рд┐рдпрд╛ рдбрд╛рд▓реЗрдВ', icon: 'ЁЯеД', status: 'upcoming', date: '8 рджрд┐рд╕рдВрдмрд░' },
          { task: 'рджреВрд╕рд░реА рд╕рд┐рдВрдЪрд╛рдИ', icon: 'ЁЯТз', status: 'upcoming', date: '12 рджрд┐рд╕рдВрдмрд░' }
        ]
      },
      {
        week: 'рд╕рдкреНрддрд╛рд╣ 5-8',
        stage: 'рд╡реГрджреНрдзрд┐ рдХрд╛рд▓',
        tasks: [
          { task: 'рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг', icon: 'ЁЯРЫ', status: 'upcoming', date: '20 рджрд┐рд╕рдВрдмрд░' },
          { task: 'NPK рдЦрд╛рдж', icon: 'ЁЯзк', status: 'upcoming', date: '25 рджрд┐рд╕рдВрдмрд░' },
          { task: 'рддреАрд╕рд░реА рд╕рд┐рдВрдЪрд╛рдИ', icon: 'ЁЯТз', status: 'upcoming', date: '2 рдЬрдирд╡рд░реА' }
        ]
      },
      {
        week: 'рд╕рдкреНрддрд╛рд╣ 12-14',
        stage: 'рдХрдЯрд╛рдИ',
        tasks: [
          { task: 'рдлрд╕рд▓ рдХрдЯрд╛рдИ', icon: 'ЁЯФк', status: 'future', date: '15 рдорд╛рд░реНрдЪ' },
          { task: 'рд╕реБрдЦрд╛рдирд╛', icon: 'тШАя╕П', status: 'future', date: '20 рдорд╛рд░реНрдЪ' },
          { task: 'рднрдВрдбрд╛рд░рдг', icon: 'ЁЯПа', status: 'future', date: '25 рдорд╛рд░реНрдЪ' }
        ]
      }
    ]
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800 border-green-200';
      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'upcoming': return 'bg-blue-100 text-blue-800 border-blue-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'completed': return 'тЬЕ рдкреВрд░рд╛';
      case 'pending': return 'тП│ рдмрд╛рдХреА';
      case 'upcoming': return 'ЁЯУЕ рдЖрдЧрд╛рдореА';
      default: return 'ЁЯФо рднрд╡рд┐рд╖реНрдп';
    }
  };

  const markAsCompleted = (taskName: string) => {
    toast({
      title: "тЬЕ рдХрд╛рдо рдкреВрд░рд╛ рд╣реБрдЖ",
      description: `${taskName} рдХреЛ рдкреВрд░рд╛ рдХрд╛ рдирд┐рд╢рд╛рди рд▓рдЧрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛`,
    });
  };

  const setReminder = (taskName: string, date: string) => {
    toast({
      title: "ЁЯФФ рд░рд┐рдорд╛рдЗрдВрдбрд░ рд╕реЗрдЯ рд╣реЛ рдЧрдпрд╛",
      description: `${date} рдХреЛ ${taskName} рдХреА рдпрд╛рдж рджрд┐рд▓рд╛рдИ рдЬрд╛рдПрдЧреА`,
    });
  };

  const currentCalendar = calendarData[selectedCrop] || [];

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-800 mb-2">ЁЯУЕ рдлрд╕рд▓ рдХреИрд▓реЗрдВрдбрд░</h2>
        <p className="text-gray-600">рд╕рдордп рдкрд░ рдХрд░реЗрдВ рд╕рднреА рдХрд╛рдо</p>
      </div>

      {/* Crop Selection */}
      <div className="flex items-center space-x-2 overflow-x-auto">
        <Calendar className="h-5 w-5 text-gray-600 flex-shrink-0" />
        <div className="flex space-x-2">
          {crops.map(crop => (
            <Button
              key={crop}
              variant={selectedCrop === crop ? "default" : "outline"}
              size="sm"
              onClick={() => setSelectedCrop(crop)}
              className="whitespace-nowrap"
            >
              {crop}
            </Button>
          ))}
        </div>
      </div>

      {/* Progress Summary */}
      <Card className="bg-gradient-to-r from-green-50 to-blue-50 border-green-200">
        <CardContent className="p-4">
          <div className="grid grid-cols-3 gap-4 text-center">
            <div>
              <div className="text-lg font-bold text-green-600">5</div>
              <div className="text-xs text-gray-600">рдкреВрд░реЗ рдХрд╛рдо</div>
            </div>
            <div>
              <div className="text-lg font-bold text-yellow-600">2</div>
              <div className="text-xs text-gray-600">рдмрд╛рдХреА рдХрд╛рдо</div>
            </div>
            <div>
              <div className="text-lg font-bold text-blue-600">8</div>
              <div className="text-xs text-gray-600">рдЖрдЧрд╛рдореА</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Calendar Timeline */}
      <div className="space-y-4">
        {currentCalendar.map((period, index) => (
          <Card key={index} className="border-l-4 border-l-purple-500">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center justify-between">
                <div>
                  <span className="text-lg">{period.stage}</span>
                  <span className="text-sm text-gray-500 ml-2">({period.week})</span>
                </div>
                <Clock className="h-5 w-5 text-purple-500" />
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {period.tasks.map((task, taskIndex) => (
                <div key={taskIndex} className={`p-3 rounded-lg border ${getStatusColor(task.status)}`}>
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center">
                      <span className="text-xl mr-3">{task.icon}</span>
                      <div>
                        <h4 className="font-medium">{task.task}</h4>
                        <p className="text-xs opacity-75">{task.date}</p>
                      </div>
                    </div>
                    <span className="text-xs px-2 py-1 rounded-full bg-white bg-opacity-50">
                      {getStatusText(task.status)}
                    </span>
                  </div>
                  
                  {task.status === 'pending' && (
                    <div className="flex space-x-2 mt-2">
                      <Button 
                        size="sm" 
                        variant="outline" 
                        className="text-xs h-8"
                        onClick={() => markAsCompleted(task.task)}
                      >
                        тЬЕ рдкреВрд░рд╛ рд╣реБрдЖ
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline" 
                        className="text-xs h-8"
                        onClick={() => setReminder(task.task, task.date)}
                      >
                        ЁЯФФ рдпрд╛рдж рджрд┐рд▓рд╛рдПрдВ
                      </Button>
                    </div>
                  )}
                  
                  {task.status === 'upcoming' && (
                    <div className="mt-2">
                      <Button 
                        size="sm" 
                        variant="outline" 
                        className="text-xs h-8"
                        onClick={() => setReminder(task.task, task.date)}
                      >
                        ЁЯФФ рд░рд┐рдорд╛рдЗрдВрдбрд░ рд╕реЗрдЯ рдХрд░реЗрдВ
                      </Button>
                    </div>
                  )}
                </div>
              ))}
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Add Custom Task */}
      <Card className="border-2 border-dashed border-gray-300">
        <CardContent className="p-4 text-center">
          <Button variant="outline" className="w-full">
            <Plus className="mr-2 h-4 w-4" />
            рдЕрдкрдирд╛ рдХрд╛рдо рдЬреЛрдбрд╝реЗрдВ
          </Button>
        </CardContent>
      </Card>

      {/* Tips */}
      <Card className="bg-gradient-to-r from-amber-50 to-orange-50 border-amber-200">
        <CardContent className="p-4">
          <h4 className="font-semibold text-amber-800 mb-2">ЁЯТб рдлрд╕рд▓ рдХреИрд▓реЗрдВрдбрд░ рдЯрд┐рдкреНрд╕:</h4>
          <ul className="text-sm text-amber-700 space-y-1">
            <li>тАв рдореМрд╕рдо рджреЗрдЦрдХрд░ рдХрд╛рдо рдХрд╛ рд╕рдордп рддрдп рдХрд░реЗрдВ</li>
            <li>тАв рд╣рд░ рдХрд╛рдо рдХреЛ рд╕рдордп рдкрд░ рдХрд░рдиреЗ рд╕реЗ рдЕрдЪреНрдЫреА рдкреИрджрд╛рд╡рд╛рд░ рдорд┐рд▓рддреА рд╣реИ</li>
            <li>тАв рд░рд┐рдорд╛рдЗрдВрдбрд░ рд▓рдЧрд╛рдХрд░ рдХреЛрдИ рдХрд╛рдо рди рднреВрд▓реЗрдВ</li>
            <li>тАв рд╕реНрдерд╛рдиреАрдп рдХреГрд╖рд┐ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВ</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
};

export default CropCalendar;
