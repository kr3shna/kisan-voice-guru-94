
import React, { useState, useEffect } from 'react';
import { Mic, MicOff, X, Volume2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';

interface VoiceAssistantProps {
  isActive: boolean;
  onClose: () => void;
}

const VoiceAssistant: React.FC<VoiceAssistantProps> = ({ isActive, onClose }) => {
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [response, setResponse] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const { toast } = useToast();

  // Sample farming responses
  const farmingResponses = {
    'рдореМрд╕рдо': 'рдЖрдЬ рдХрд╛ рдореМрд╕рдо рд╕рд╛рдл рд╣реИ, рддрд╛рдкрдорд╛рди 28┬░Cред рдХрд▓ рд╣рд▓реНрдХреА рдмрд╛рд░рд┐рд╢ рдХреА рд╕рдВрднрд╛рд╡рдирд╛ рд╣реИред рдЖрдЬ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред',
    'рднрд╛рд╡': 'рдЖрдЬ рдЧреЗрд╣реВрдВ рдХрд╛ рднрд╛рд╡ тВ╣2,150 рдкреНрд░рддрд┐ рдХреНрд╡рд┐рдВрдЯрд▓ рд╣реИред рдХрд▓ рд╕реЗ тВ╣50 рдмрдврд╝рд╛ рд╣реИред рдмреЗрдЪрдиреЗ рдХрд╛ рдЕрдЪреНрдЫрд╛ рд╕рдордп рд╣реИред',
    'рдЦрд╛рдж': 'рдЗрд╕ рд╕рдордп рдпреВрд░рд┐рдпрд╛ рдЦрд╛рдж рдбрд╛рд▓рдиреЗ рдХрд╛ рд╕рд╣реА рд╕рдордп рд╣реИред 50 рдХрд┐рд▓реЛ рдкреНрд░рддрд┐ рдПрдХрдбрд╝ рд╕реБрдмрд╣ рдХреЗ рд╕рдордп рдбрд╛рд▓реЗрдВред',
    'рдмреАрдорд╛рд░реА': 'рдкрддреНрддрд┐рдпреЛрдВ рдкрд░ рдзрдмреНрдмреЗ рджрд┐рдЦ рд░рд╣реЗ рд╣реИрдВ? рддрд╕реНрд╡реАрд░ рд▓реЗрдХрд░ рд░реЛрдЧ рдЬрд╛рдВрдЪ рд╕реЗрдХреНрд╢рди рдореЗрдВ рдЬрд╛рдПрдВред рдореИрдВ рдкреВрд░реА рдЬрд╛рдирдХрд╛рд░реА рджреВрдВрдЧрд╛ред',
    'рдпреЛрдЬрдирд╛': 'PM-KISAN рдпреЛрдЬрдирд╛ рдХреЗ рддрд╣рдд тВ╣6000 рд╕рд╛рд▓рд╛рдирд╛ рдорд┐рд▓рддреЗ рд╣реИрдВред рдЖрдкрдХрд╛ рдЕрдЧрд▓рд╛ рдкреИрд╕рд╛ 15 рдЬрдирд╡рд░реА рдХреЛ рдЖрдПрдЧрд╛ред'
  };

  const getResponse = (text: string) => {
    const lowerText = text.toLowerCase();
    for (const [key, value] of Object.entries(farmingResponses)) {
      if (lowerText.includes(key)) {
        return value;
      }
    }
    return 'рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБред рдХреГрдкрдпрд╛ рдлрд╕рд▓, рдореМрд╕рдо, рдордВрдбреА рднрд╛рд╡, рдпрд╛ рдпреЛрдЬрдирд╛рдУрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВред';
  };

  const startListening = () => {
    setIsListening(true);
    setTranscript('');
    
    // Simulate voice recognition
    setTimeout(() => {
      const sampleQuestions = [
        'рдЖрдЬ рдХрд╛ рдореМрд╕рдо рдХреИрд╕рд╛ рд╣реИ?',
        'рдЧреЗрд╣реВрдВ рдХрд╛ рднрд╛рд╡ рдХреНрдпрд╛ рд╣реИ?',
        'рдХрдм рдЦрд╛рдж рдбрд╛рд▓рдирд╛ рдЪрд╛рд╣рд┐рдП?',
        'PM-KISAN рдХреА рдЬрд╛рдирдХрд╛рд░реА рдЪрд╛рд╣рд┐рдП'
      ];
      const randomQuestion = sampleQuestions[Math.floor(Math.random() * sampleQuestions.length)];
      setTranscript(randomQuestion);
      setIsListening(false);
      processQuery(randomQuestion);
    }, 3000);
  };

  const processQuery = (query: string) => {
    setIsProcessing(true);
    
    setTimeout(() => {
      const aiResponse = getResponse(query);
      setResponse(aiResponse);
      setIsProcessing(false);
      
      // Simulate text-to-speech
      toast({
        title: "ЁЯФК рдЙрддреНрддрд░ рдмреЛрд▓рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ",
        description: "рдЖрд╡рд╛рдЬрд╝ рдореЗрдВ рд╕реБрдирдиреЗ рдХреЗ рд▓рд┐рдП рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ...",
      });
    }, 2000);
  };

  const speakResponse = () => {
    toast({
      title: "ЁЯФК рджреЛрдмрд╛рд░рд╛ рд╕реБрдирд╛рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ",
      description: response.slice(0, 50) + "...",
    });
  };

  if (!isActive) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardContent className="p-6">
          {/* Header */}
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-bold text-green-800 flex items-center">
              ЁЯдЦ рдХрд┐рд╕рд╛рди AI рд╕рд╣рд╛рдпрдХ
            </h2>
            <Button variant="ghost" size="sm" onClick={onClose}>
              <X className="h-5 w-5" />
            </Button>
          </div>

          {/* Voice Animation */}
          <div className="text-center mb-6">
            <div className={`w-20 h-20 mx-auto rounded-full flex items-center justify-center transition-all ${
              isListening ? 'bg-red-100 animate-pulse' : 'bg-green-100'
            }`}>
              {isListening ? (
                <Mic className="h-8 w-8 text-red-600" />
              ) : (
                <MicOff className="h-8 w-8 text-green-600" />
              )}
            </div>
            
            <p className="mt-3 text-sm text-gray-600">
              {isListening ? 'ЁЯОд рд╕реБрди рд░рд╣рд╛ рд╣реВрдБ...' : 
               isProcessing ? 'ЁЯза рд╕реЛрдЪ рд░рд╣рд╛ рд╣реВрдБ...' : 
               'ЁЯЧгя╕П рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ'}
            </p>
          </div>

          {/* Transcript */}
          {transcript && (
            <div className="mb-4 p-3 bg-blue-50 rounded-lg">
              <p className="text-sm text-gray-600 mb-1">рдЖрдкрдХрд╛ рд╕рд╡рд╛рд▓:</p>
              <p className="font-medium text-blue-800">{transcript}</p>
            </div>
          )}

          {/* Response */}
          {response && (
            <div className="mb-4 p-3 bg-green-50 rounded-lg">
              <div className="flex justify-between items-start mb-2">
                <p className="text-sm text-gray-600">рдХрд┐рд╕рд╛рди AI рдХрд╛ рдЬрд╡рд╛рдм:</p>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  onClick={speakResponse}
                  className="p-1 h-auto"
                >
                  <Volume2 className="h-4 w-4 text-green-600" />
                </Button>
              </div>
              <p className="text-green-800">{response}</p>
            </div>
          )}

          {/* Action Buttons */}
          <div className="space-y-3">
            <Button 
              onClick={startListening}
              disabled={isListening || isProcessing}
              className="w-full bg-green-600 hover:bg-green-700"
            >
              {isListening ? (
                <>
                  <Mic className="mr-2 h-4 w-4 animate-pulse" />
                  рд╕реБрди рд░рд╣рд╛ рд╣реВрдБ...
                </>
              ) : isProcessing ? (
                'рдЬрд╡рд╛рдм рддреИрдпрд╛рд░ рдХрд░ рд░рд╣рд╛ рд╣реВрдБ...'
              ) : (
                <>
                  <Mic className="mr-2 h-4 w-4" />
                  рдмреЛрд▓рдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ
                </>
              )}
            </Button>

            {/* Quick Actions */}
            <div className="grid grid-cols-2 gap-2">
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => processQuery('рдЖрдЬ рдХрд╛ рдореМрд╕рдо рдХреИрд╕рд╛ рд╣реИ?')}
              >
                ЁЯМдя╕П рдореМрд╕рдо
              </Button>
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => processQuery('рдЧреЗрд╣реВрдВ рдХрд╛ рднрд╛рд╡ рдХреНрдпрд╛ рд╣реИ?')}
              >
                ЁЯТ░ рднрд╛рд╡
              </Button>
            </div>
          </div>

          {/* Tips */}
          <div className="mt-4 p-3 bg-yellow-50 rounded-lg">
            <p className="text-xs text-yellow-800">
              ЁЯТб <strong>рд╕реБрдЭрд╛рд╡:</strong> рдореМрд╕рдо, рдордВрдбреА рднрд╛рд╡, рдлрд╕рд▓ рдХреА рдмреАрдорд╛рд░реА, рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВ
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default VoiceAssistant;
